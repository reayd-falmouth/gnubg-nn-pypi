name: Publish wheels

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
  push:
    tags:
      - 'v*'   # trigger on version tags like v1.0.0

permissions:
  contents: write  # required for release upload
  id-token: write  # required for OIDC (optional)

jobs:
  build-linux:
    name: Build Linux (manylinux) wheels
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            autoconf automake \
            pkg-config \
            python3-dev \
            libgtk-3-dev \
            libssl-dev \
            zlib1g-dev

      - name: Apply Patch files
        run: make patch

      - name: Generate configure script & configure
        run: make configure

      - name: Set up Python & build tools
        uses: actions/setup-python@v4
        with:
          python-version-file: .python-version

      - name: Install cibuildwheel & auditwheel
        run: pip install --upgrade pip setuptools wheel cibuildwheel auditwheel

      - name: Build manylinux wheels
        env:
          CIBW_PLATFORM: linux
          CIBW_SKIP: "pp*"           # skip PyPy if you don’t need it
        run: cibuildwheel --output-dir wheelhouse/linux

      - name: Install built wheel (Linux)
        run: |
          pyver=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          echo "Looking for: *${pyver}*x86_64*.whl in wheelhouse/linux"
          whl=$(ls wheelhouse/linux/*${pyver}*x86_64*.whl | head -n 1)
          if [ -z "$whl" ]; then
            echo "❌ No matching wheel found for Python version ${pyver} and arch x86_64"
            exit 1
          fi
          pip install "$whl"

      - name: Run tests
        run: python3 -m unittest discover -s gnubg.tests

      - name: Upload Linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: manylinux-wheels
          path: wheelhouse/linux/*manylinux*.whl

  build-macos:
    name: Build macOS wheels
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install system dependencies on macOS
        run: |
          brew update
          brew install autoconf automake libtool pkg-config

      - name: Apply Patch files
        run: make patch

      - name: Make libtool macros available
        run: |
          # libtoolize (or glibtoolize on Homebrew installs) installs the m4 files
          # into your autoconf search path
          cd gnubg-nn
          glibtoolize --force --copy
          aclocal
          autoheader

      - name: Generate configure script & configure
        run: make configure

      - name: Set up Python & build tools
        uses: actions/setup-python@v4
        with:
          python-version-file: .python-version
          check-latest: true    # ← allow downloading if it's not in the cache

      - name: Install cibuildwheel
        run: pip install --upgrade pip setuptools wheel cibuildwheel

      - name: Build macOS wheels
        env:
          CIBW_PLATFORM: macos
          CIBW_SKIP: "pp*"           # skip PyPy if you don’t need it
          CIBW_ARCHS_MACOS: "universal2"
        run: cibuildwheel --output-dir wheelhouse/macos

      - name: Install built wheel (macOS)
        run: |
          pyver=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          pip install wheelhouse/macos/*$pyver*.whl

      - name: Run tests
        run: python3 -m unittest discover -s gnubg.tests

      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: macos-wheels
          path: wheelhouse/macos/*macosx*.whl

  build-windows-mingw:
    name: Build Windows (MSYS2 / MinGW) wheels
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up MSYS2 + MINGW Python
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: |
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python3
            mingw-w64-x86_64-python-pip

      - name: Install Autotools (autoconf, automake, m4, make)
        shell: msys2 {0}
        run: |
          pacman -Sy --noconfirm autoconf automake libtool m4 make mingw-w64-x86_64-gcc 
          pacman -Sy --noconfirm --needed mingw-w64-x86_64-autotools

      - name: Apply Patch files
        run: make patch

      - name: Build wheel under MSYS2
        shell: msys2 {0}
        run: |
          export PATH="/c/msys64/mingw64/bin:$PATH"
          cd gnubg-nn

          autoreconf -vfi
          ./configure --host=x86_64-w64-mingw32
          make

          cd ..
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip wheel . \
            --global-option build_ext \
            --global-option "--compiler=mingw32" \
            --wheel-dir=./wheelhouse/windows

      - name: Retag Windows wheels
        shell: bash
        run: |
          WINDOWS_PLAT=win_amd64  # Change this if targeting a different platform tag
          for whl in dist/windows/*.whl; do
            echo "Retagging $whl"
            python -m wheel tags --remove --platform-tag=$WINDOWS_PLAT "$whl"
          done

      - name: Upload Windows wheels
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-mingw
          path: wheelhouse/windows/*.whl

      - name: Run tests
        shell: msys2 {0}
        run: |
          export PATH="/c/msys64/mingw64/bin:$PATH"
          python3 -m venv venv
          source venv/bin/activate
          pyver=$(python3 -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          python3 -m pip install --break-system-packages wheelhouse/windows/*$pyver*.whl
          python3 -m unittest discover -s gnubg.tests

  publish:
    name: Publish to testpypi
    needs: [build-linux,build-macos,build-windows-mingw]
    runs-on: ubuntu-latest
    environment: testpypi

    steps:
      - name: Set release tag
        id: vars
        run: |
          echo "tag=${{ github.event.inputs.tag || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Download Linux wheels
        uses: actions/download-artifact@v4
        with:
          name: manylinux-wheels
          path: dist/

      - name: Download macOS wheels
        uses: actions/download-artifact@v4
        with:
          name: macos-wheels
          path: dist/

      - name: Download Windows wheels
        uses: actions/download-artifact@v4
        with:
          name: windows-wheels-mingw
          path: dist/

      - name: Install Twine
        run: pip install --upgrade pip twine setuptools

      - name: Upload to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          ls -la
          python -m pip show setuptools
          twine upload --verbose --repository testpypi dist/*.whl

      - name: Create GitHub release (if needed)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: Release ${{ steps.vars.outputs.tag }}
          files: dist/*.whl
          generate_release_notes: true

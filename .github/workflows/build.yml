# .github/workflows/build-wheels.yml
name: Build wheels

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-linux:
    name: Build Linux (manylinux) wheels
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            autoconf automake \
            pkg-config \
            python3-dev \
            libgtk-3-dev \
            libssl-dev \
            zlib1g-dev

      - name: Apply Patch files
        run: make patch

      - name: Generate configure script & configure
        run: make configure

      - name: Set up Python & build tools
        uses: actions/setup-python@v4
        with:
          python-version-file: .python-version

      - name: Install cibuildwheel & auditwheel
        run: pip install --upgrade pip setuptools wheel cibuildwheel auditwheel

      - name: Build manylinux wheels
        env:
          CIBW_PLATFORM: linux
          CIBW_SKIP: "pp*"           # skip PyPy if you don’t need it
        run: cibuildwheel --output-dir wheelhouse/linux

      - name: Upload Linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: manylinux-wheels
          path: wheelhouse/linux/*manylinux*.whl

  build-macos:
    name: Build macOS wheels
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install system dependencies on macOS
        run: |
            brew update
            brew install autoconf automake libtool pkg-config

      - name: Apply Patch files
        run: make patch

      - name: Make libtool macros available
        run: |
          # libtoolize (or glibtoolize on Homebrew installs) installs the m4 files
          # into your autoconf search path
          cd gnubg-nn
          glibtoolize --force --copy
          aclocal
          autoheader

      - name: Generate configure script & configure
        run: make configure

      - name: Set up Python & build tools
        uses: actions/setup-python@v4
        with:
          python-version-file: .python-version
          check-latest: true    # ← allow downloading if it's not in the cache

      - name: Install cibuildwheel
        run: pip install --upgrade pip setuptools wheel cibuildwheel

      - name: Build macOS wheels
        env:
          CIBW_PLATFORM: macos
          CIBW_SKIP: "pp*"           # skip PyPy if you don’t need it
          CIBW_ARCHS_MACOS: "universal2"
        run: cibuildwheel --output-dir wheelhouse/macos

      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: macos-wheels
          path: wheelhouse/macos/*macosx*.whl

#  build-windows-meson:
#    name: Build Windows (MSYS2 / MinGW) wheels via Meson
#    runs-on: windows-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          submodules: recursive
#          fetch-depth: 0
#
#      - name: Set up MSYS2 with Meson, Ninja & Python
#        uses: msys2/setup-msys2@v2
#        with:
#          update: true
#          install: |
#            base-devel
#            mingw-w64-x86_64-toolchain
#            mingw-w64-x86_64-python3
#            mingw-w64-x86_64-python-pip
#            mingw-w64-x86_64-meson
#            mingw-w64-x86_64-ninja
#
#      - name: Install Autotools (autoconf, automake, m4, make)
#        shell: msys2 {0}
#        run: |
#          pacman -Sy --noconfirm autoconf automake libtool m4 make mingw-w64-x86_64-gcc
#
##      - name: Apply Patch files
##        run: make patch
#
#      - name: Build wheel under MSYS2
#        shell: msys2 {0}
#        run: |
#          # Put MinGW64 tools first on PATH
#          export PATH="/c/msys64/mingw64/bin:$PATH"
#
#          # Configure & build with Meson
#          meson setup builddir --buildtype release --prefix=/usr/local
#          ninja -C builddir
#
#          # Build a Python wheel using MSYS2’s Python + gcc
#          python3 -m pip install --upgrade pip setuptools wheel
#          python3 -m pip wheel . --wheel-dir wheelhouse/windows
#
#      - name: Upload Windows wheels
#        uses: actions/upload-artifact@v4
#        with:
#          name: windows-wheels-mingw
#          path: wheelhouse/windows/*.whl

  build-windows-mingw:
    name: Build Windows (MSYS2 / MinGW) wheels
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up MSYS2 + MINGW Python
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: |
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python3
            mingw-w64-x86_64-python-pip

      - name: Install Autotools (autoconf, automake, m4, make)
        shell: msys2 {0}
        run: |
          pacman -Sy --noconfirm autoconf automake libtool m4 make mingw-w64-x86_64-gcc
          pacman -Sy --needed mingw-w64-x86_64-autotools

      - name: Apply Patch files
        run: make patch

      - name: Build wheel under MSYS2
        shell: msys2 {0}
        run: |
          # Ensure we're in the MINGW64 environment
          export PATH="/c/msys64/mingw64/bin:$PATH"
          cd gnubg-nn
          
          autoreconf -vfi
          
          # Prepare the code exactly as you do on *nix
          ./configure --host=x86_64-w64-mingw32
  
          # Build the C++ parts
          make
  
          # Build a Python wheel using MSYS2’s Python + gcc
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip wheel . --wheel-dir=../wheelhouse/windows

      - name: Upload Windows wheels
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-mingw
          path: wheelhouse/windows/*.whl

#  build-windows:
#    name: Build Windows wheels
#    runs-on: windows-latest
#
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: recursive
#          fetch-depth: 0
#
#      - name: Set up MSYS2 (with make, autoconf, automake)
#        uses: msys2/setup-msys2@v2
#        with:
#          update: true
#          install: base-devel
#
#      # 2) Install the MSYS2 Autotools packages
#      - name: Install Autotools (autoconf, automake, m4, make)
#        shell: msys2 {0}
#        run: |
#          pacman -Sy --noconfirm autoconf automake libtool m4 make mingw-w64-x86_64-gcc
#
#      - name: Apply Patch files
#        run: make patch
#
#      # Now run autoreconf/configure in MSYS2’s Bash
#      - name: Generate configure script & run configure
#        shell: msys2 {0}
#        run: make configure
#
#      - name: Set up Python & build tools
#        uses: actions/setup-python@v4
#        with:
#          python-version-file: .python-version
#          check-latest: true
#
#      - name: Install cibuildwheel
#        run: pip install --upgrade pip setuptools wheel cibuildwheel
#
#      - name: Build Windows wheels
#        env:
#          CIBW_PLATFORM: windows
#          CIBW_SKIP: "pp*"
#          # <-- add /MAP here so link.exe spits out a .map
#          LINK: "/MAP" # /VERBOSE"
#        run: cibuildwheel --output-dir wheelhouse/windows
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: windows-wheels
#          path: wheelhouse/windows/*.whl
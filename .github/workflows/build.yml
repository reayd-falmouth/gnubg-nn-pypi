# .github/workflows/build-wheels.yml
name: Build wheels

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      -
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.os }} / Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
#          - "ubuntu-latest"
          - "macos-13"
          - "macos-14"
#          - "windows-latest"
        python:
          - "cp38"
          - "cp39"
          - "cp310"
          - "cp311"
          - "cp312"
          - "cp313"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            autoconf automake \
            pkg-config \
            python3.12-dev \
            libgtk-3-dev \
            libssl-dev \
            zlib1g-dev

#      - name: Set up Python & build tools (linux, macOS, Windows)
#        uses: actions/setup-python@v4
#        with:
#          python-version-file: .python-version
#          check-latest: true    # ← allow downloading if it's not in the cache

      - name: Install Meson
        run: pip install meson ninja cibuildwheel

      - name: Build with meson
        run: |
          meson setup builddir
          meson compile -C builddir

      - name: Build wheels (linux, macOS, Windows)
        env:
#          CL: "/std:c++14 /TP /wd4244 /wd4305 /wd4028 /wd4090"
          CIBW_SKIP: "pp*"
          CIBW_BUILD: "${{ matrix.python }}-*"
          CIBW_ARCHS_MACOS: "native"
          CIBW_PLATFORM: ${{ matrix.os == 'ubuntu-latest' && 'linux' || (matrix.os == 'macos-13' && 'macos') || (matrix.os == 'macos-14' && 'macos') ||(matrix.os == 'windows-latest' && 'windows')}}
        run: cibuildwheel --output-dir wheelhouse

#
#      - name: Install system dependencies (macOS)
#        if: matrix.os == 'macos-latest'
#        run: |
#          brew update
#          brew install autoconf automake libtool pkg-config
#          # libtoolize (or glibtoolize on Homebrew installs) installs the m4 files
#          # into your autoconf search path
#          cd gnubg-nn
#          glibtoolize --force --copy
#          aclocal
#          autoheader
#
#      - name: Install system dependencies (Windows MSYS)
#        if: matrix.os == 'windows-latest'
#        uses: msys2/setup-msys2@v2
#        with:
#          update: true
#          install: |
#            base-devel
#            mingw-w64-x86_64-toolchain
#            mingw-w64-x86_64-python3
#            mingw-w64-x86_64-python-pip
#            autoconf
#            automake
#            libtool
#            m4
#            make
#            mingw-w64-x86_64-gcc
#            mingw-w64-x86_64-autotools
#
#      - name: Apply Patch files (Linux, macOS, Windows)
#        run: make patch
#
#      - name: Generate configure script & configure (Linux, macOS)
#        if: matrix.os != 'windows-latest'
#        run: make configure
#
#      - name: Generate configure script & configure (Windows MSYS)
#        if: matrix.os == 'windows-latest'
#        shell: msys2 {0}
#        run: make configure
#
#      - name: Set up Python & build tools (linux, macOS, Windows)
#        uses: actions/setup-python@v4
#        with:
#          python-version-file: .python-version
#          check-latest: true    # ← allow downloading if it's not in the cache
#
#      - name: Install build tools (linux, macOS, Windows)
#        run: pip install --upgrade pip setuptools wheel cibuildwheel auditwheel
#
#      - name: Build wheels (linux, macOS, Windows)
#        env:
#          CL: "/std:c++14 /TP /wd4244 /wd4305 /wd4028 /wd4090"
#          CIBW_SKIP: "pp*"
#          CIBW_BUILD: "${{ matrix.python }}-*"
#          CIBW_ARCHS_MACOS: "universal2"
#          CIBW_PLATFORM: ${{ matrix.os == 'ubuntu-latest' && 'linux' || (matrix.os == 'macos-latest' && 'macos') || (matrix.os == 'windows-latest' && 'windows')}}
#        run: cibuildwheel --output-dir wheelhouse

#      - name: Build wheel under MSYS2
#        if: matrix.os == 'windows-latest'
#        shell: msys2 {0}
#        run: |
#          export PATH=$(printf "%s\n" $PATH | grep -vE '/msys64/usr/bin' | paste -sd: -)
#          echo "Cleaned PATH: $PATH"
#          export PATH="/c/msys64/mingw64/bin:$PATH"
#          python3 -m pip install --upgrade setuptools wheel cibuildwheel auditwheel
#          python3 -m cibuildwheel --output-dir wheelhouse

#          cd gnubg-nn
#
#          autoreconf -vfi
#          ./configure --host=x86_64-w64-mingw32
#          make
#
#          cd ..

#          python3 -m pip wheel . \
#            --global-option build_ext \
#            --global-option "--compiler=mingw32" \
#            --wheel-dir=./wheelhouse/

#      - name: Retag Windows wheels
#        if: matrix.os == 'windows-latest'
#        shell: bash
#        run: |
#          python -m pip install --upgrade pip setuptools wheel
#          WINDOWS_PLAT=win_amd64  # Change this if targeting a different platform tag
#          for whl in wheelhouse/*.whl; do
#            echo "Retagging $whl"
#            python -m wheel tags --remove --platform-tag=$WINDOWS_PLAT "$whl"
#          done

#      - name: Install built wheel (macOS, linux)
#        if: matrix.os != 'windows-latest'
#        run: |
#          pip install wheelhouse/*.whl
#
#      - name: Run tests
#        if: matrix.os != 'windows-latest'
#        run: python3 -m unittest discover -s gnubg.tests
#
#      - name: Run tests
#        if: matrix.os == 'windows-latest'
#        shell: cmd
#        run: |
#          python3 -m venv venv
#          venv\Scripts\activate
#          python3 -m pip install wheelhouse/*.whl
#          python3 -m unittest discover -s gnubg.tests

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python }}
          path: wheelhouse/*.whl

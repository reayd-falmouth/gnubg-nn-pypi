# .github/workflows/build-wheels.yml
name: Build wheels

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
#  build-linux:
#    name: Build Linux (manylinux) wheels
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          submodules: recursive
#          fetch-depth: 0
#
#      - name: Install system dependencies
#        run: |
#          sudo apt update
#          sudo apt install -y \
#            build-essential \
#            autoconf automake \
#            pkg-config \
#            python3-dev \
#            libgtk-3-dev \
#            libssl-dev \
#            zlib1g-dev
#
#      - name: Apply Patch files
#        run: make patch
#
#      - name: Generate configure script & configure
#        run: make configure
#
#      - name: Set up Python & build tools
#        uses: actions/setup-python@v4
#        with:
#          python-version-file: .python-version
#
#      - name: Install cibuildwheel & auditwheel
#        run: pip install --upgrade pip setuptools wheel cibuildwheel auditwheel
#
#      - name: Build manylinux wheels
#        env:
#          CIBW_PLATFORM: linux
#          CIBW_SKIP: "pp*"           # skip PyPy if you don’t need it
#        run: cibuildwheel --output-dir wheelhouse/linux
#
#      - name: Install built wheel (Linux)
#        run: |
#          pyver=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
#          echo "Looking for: *${pyver}*x86_64*.whl in wheelhouse/linux"
#          whl=$(ls wheelhouse/linux/*${pyver}*x86_64*.whl | head -n 1)
#          if [ -z "$whl" ]; then
#            echo "❌ No matching wheel found for Python version ${pyver} and arch x86_64"
#            exit 1
#          fi
#          pip install "$whl"
#
#      - name: Run tests
#        run: python3 -m unittest discover -s gnubg.tests
#
#      - name: Upload Linux wheels
#        uses: actions/upload-artifact@v4
#        with:
#          name: manylinux-wheels
#          path: wheelhouse/linux/*manylinux*.whl
#
#  build-macos:
#    name: Build macOS wheels
#    runs-on: macos-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          submodules: recursive
#          fetch-depth: 0
#
#      - name: Install system dependencies on macOS
#        run: |
#            brew update
#            brew install autoconf automake libtool pkg-config
#
#      - name: Apply Patch files
#        run: make patch
#
#      - name: Make libtool macros available
#        run: |
#          # libtoolize (or glibtoolize on Homebrew installs) installs the m4 files
#          # into your autoconf search path
#          cd gnubg-nn
#          glibtoolize --force --copy
#          aclocal
#          autoheader
#
#      - name: Generate configure script & configure
#        run: make configure
#
#      - name: Set up Python & build tools
#        uses: actions/setup-python@v4
#        with:
#          python-version-file: .python-version
#          check-latest: true    # ← allow downloading if it's not in the cache
#
#      - name: Install cibuildwheel
#        run: pip install --upgrade pip setuptools wheel cibuildwheel
#
#      - name: Build macOS wheels
#        env:
#          CIBW_PLATFORM: macos
#          CIBW_SKIP: "pp*"           # skip PyPy if you don’t need it
#          CIBW_ARCHS_MACOS: "universal2"
#        run: cibuildwheel --output-dir wheelhouse/macos
#
#      - name: Install built wheel (macOS)
#        run: |
#          pyver=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
#          pip install wheelhouse/macos/*$pyver*.whl
#
#      - name: Run tests
#        run: python3 -m unittest discover -s gnubg.tests
#
#      - name: Upload macOS wheels
#        uses: actions/upload-artifact@v4
#        with:
#          name: macos-wheels
#          path: wheelhouse/macos/*macosx*.whl

  build-windows-mingw:
    name: Build Windows (MSYS2 / MinGW) wheels
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.6"
            python-short: "36"
          - python-version: "3.7"
            python-short: "37"
          - python-version: "3.8"
            python-short: "38"
          - python-version: "3.9"
            python-short: "39"
          - python-version: "3.10"
            python-short: "310"
          - python-version: "3.11"
            python-short: "311"
          - python-version: "3.12"
            python-short: "312"
          - python-version: "3.13"
            python-short: "313"

    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            autoconf automake libtool m4 make
            mingw-w64-x86_64-python${{ matrix.python-short }}
            mingw-w64-x86_64-python${{ matrix.python-short }}-pip  # Remove dot for pip package

      - name: Apply Patch files
        run: make patch

      - name: Build wheel under MSYS2
        shell: msys2 {0}
        run: |
          export PATH="/mingw64/bin:$PATH"
          cd gnubg-nn
  
          autoreconf -vfi
          ./configure --host=x86_64-w64-mingw32
          make
  
          cd ..
          python${{ matrix.python-version }} -m pip install --upgrade pip setuptools wheel
          python${{ matrix.python-version }} -m pip wheel . \
            --global-option build_ext \
            --global-option "--compiler=mingw32" \
            --wheel-dir=./wheelhouse/windows

      - name: Retag Windows wheels
        shell: bash
        run: |
          WINDOWS_PLAT=win_amd64
          for whl in wheelhouse/windows/*.whl; do
            echo "Retagging $whl"
            python -m wheel tags --remove --platform-tag=$WINDOWS_PLAT "$whl"
          done

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheel-py${{ matrix.python-version }}
          path: wheelhouse/windows/*.whl

#      - name: Run tests
#        shell: cmd
#        run: |
#          python3 -m venv venv
#          venv\Scripts\activate
#          python3 -m pip install wheelhouse/windows/*.whl
#          python3 -m unittest discover -s gnubg.tests
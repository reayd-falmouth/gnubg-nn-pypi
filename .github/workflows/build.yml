# .github/workflows/build-wheels.yml
name: Build wheels

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.os }} / Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-latest"
          - "macos-latest"
          - "windows-latest"
        python:
#          - "3.8"
#          - "3.9"
          - "cp310"
#          - "3.11"
#          - "3.12"
#          - "3.13"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            autoconf automake \
            pkg-config \
            python3-dev \
            libgtk-3-dev \
            libssl-dev \
            zlib1g-dev
      - name: Install system dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install autoconf automake libtool pkg-config
      - name: Make libtool macros available
        if: matrix.os == 'macos-latest'
        run: |
          # libtoolize (or glibtoolize on Homebrew installs) installs the m4 files
          # into your autoconf search path
          cd gnubg-nn
          glibtoolize --force --copy
          aclocal
          autoheader
      - name: Set up MSYS2 + MINGW Python
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: |
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python3
            mingw-w64-x86_64-python-pip

      - name: Install Autotools (autoconf, automake, m4, make)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          pacman -Sy --noconfirm autoconf automake libtool m4 make mingw-w64-x86_64-gcc 
          pacman -Sy --noconfirm --needed mingw-w64-x86_64-autotools

      - name: Apply Patch files
        run: make patch

      - name: Generate configure script & configure
        if: matrix.os != 'windows-latest'
        run: make configure

      - name: Set up Python & build tools
        if: matrix.os != 'windows-latest'
        uses: actions/setup-python@v4
        with:
          python-version-file: .python-version
          check-latest: true    # ← allow downloading if it's not in the cache

      - name: Install cibuildwheel
        if: matrix.os != 'windows-latest'
        run: pip install --upgrade pip setuptools wheel cibuildwheel auditwheel

      - name: Build wheels
        if: matrix.os != 'windows-latest'
        env:
          CIBW_SKIP: "pp*"
          CIBW_BUILD: "${{ matrix.python }}-*"
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_PLATFORM: ${{ matrix.os == 'ubuntu-latest' && 'linux' || (matrix.os == 'macos-latest' && 'macos') }}
        run: cibuildwheel --output-dir wheelhouse

      - name: Build wheel under MSYS2
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          export PATH="/c/msys64/mingw64/bin:$PATH"
          cd gnubg-nn
          
          autoreconf -vfi
          ./configure --host=x86_64-w64-mingw32
          make
          
          cd ..
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip wheel . \
            --global-option build_ext \
            --global-option "--compiler=mingw32" \
            --wheel-dir=./wheelhouse/

      - name: Retag Windows wheels
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          WINDOWS_PLAT=win_amd64  # Change this if targeting a different platform tag
          for whl in wheelhouse/*.whl; do
            echo "Retagging $whl"
            python -m wheel tags --remove --platform-tag=$WINDOWS_PLAT "$whl"
          done

      - name: Install built wheel (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          pyver=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          echo "Looking for: *${pyver}*x86_64*.whl in wheelhouse/linux"
          whl=$(ls wheelhouse/*${pyver}*x86_64*.whl | head -n 1)
          if [ -z "$whl" ]; then
            echo "❌ No matching wheel found for Python version ${pyver} and arch x86_64"
            exit 1
          fi
          pip install "$whl"

      - name: Install built wheel (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pyver=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          pip install wheelhouse/*$pyver*.whl

      - name: Run tests
        if: matrix.os != 'windows-latest'
        run: python3 -m unittest discover -s gnubg.tests

      - name: Run tests
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          python3 -m venv venv
          venv\Scripts\activate
          python3 -m pip install wheelhouse/*.whl
          python3 -m unittest discover -s gnubg.tests

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python }}
          path: wheelhouse/*.whl
